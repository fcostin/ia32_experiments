====
PLAN
====

PHASE ALPHA : get a fully functional basic version of the macro->brainfuck compiler working

	IMPLEMENTATION

		1.	WRITE CODE TRANSFORMATION TO EXPAND MACROS
		2.	WRITE CODE TO MANGLE VAR NAME TO UNIQUE NAME
		3.	WRITE CODE TO RECURSIVELY NAME-MANGLE THEN USER-MACRO-EXPAND, STARTING FROM MAIN MACRO
		4.	WRITE CODE TO EXPAND THE BUILTIN-MACROS OF MAXIMALLY NAME-MANGLED AND USER-MACRO-EXPANDED CODE
				-- THIS WILL BE DONE USING THAT NUTS-N-BOLTS BOTTOM-UP JUNK
				-- IT WILL CONVERT EVERYTHING INTO BRAINFUCK OPCODES
				-- IT WILL MAINTAIN THE FOLLOWING STATE WHILE IT TRANSFORMS IN ONE PASS
					STATE OF "BRAINFUCK MACHINE"
						TRACKS LOCATION OF "THE POINTER"
						TRACKS STACK POINTER
						ACCUMULATES GENERATED BRAINFUCK OPCODES
						PERFORMS VERY SIMPLE STATIC ANALYSIS
					STATE OF STACK MANAGER
						TRACKS LOCAL USAGE

	TESTING

		TEST IT OUT ON A FEW SIMPLE MACRO PROGRAMS
		MAKE SURE IT GENERATES BRAINFUCK CODE WITH THE CORRECT BEHAVIOUR

PHASE BETA : enhance the macro->brainfuck compiler with necessary functionality to implement brainfuck compiler

	IMPLEMENTATION

		ADD NECESSARY MISSING FUNCTIONALITY TO MACRO-LANGUAGE:

			1.	ADD PUT COMPILE-TIME CONSTANT STRING BUILT-IN-MACRO
					-- COPY FROM BRAINTEASE.PY
			2.	ADD BUILT-IN MACROS FOR STACK SHRINK AND STACK GROW, USING CONSTANT INTEGER LITERAL OFFSETS
					-- NEED TO LOOK AT CURRENT SET OF LOCALS IN PLAY, AND MOVE THEM ALL
					-- MOVE ORDER IS IMPORTANT SO MOVES DONT CLOBBER VALUES OF TO-BE-MOVED LOCALS!
			3.	ADD BUILT-IN MACROS FOR INTEGER DIVISION AND MULTIPLICATION WITH CONSTANT INTEGER LITERALS
	
	TESTING

		TEST THE NEW BUILTINS OUT ON A FEW SIMPLE EXAMPLES
		MAKE SURE IT GENERATES BRAINFUCK CODE WITH THE CORRECT BEHAVIOUR

PHASE GAMMA : simple implementation of brainfuck to ia32 compiler in macro language

	IMPLEMENTATION

		PORT EXISTING SELF-HOSTING BRAINFUCK COMPILER FROM BRAINTEASE.PY TO MACRO LANGUAGE

	TESTING

		TEST IT VIA AN ANALOGOUS BOOTSTRAPPING PROCEDURE

PHASE DELTA : incrementally improve the macro-language brainfuck to ia32 compiler to improve code generation

	IMPLEMENTATION

		WRITE NEW AND IMPROVED BRAINFUCK COMPILER

			1.	WRITE A PRINTF MACRO FOR INTEGERS
			2.	WRITE A MACRO FOR RUN-LENGTH ENCODING OF INPUT
			3.	ADJUST IA32 ASSEMBLY OUTPUT OF BRAINFUCK COMPILER TO USE 16 OR 32 BIT INTEGERS FOR CELLS
			4.	REWRITE LABEL OUTPUT OF BRAINFUCK COMPILER TO USE PRINTF INTEGER MACRO
			5.	REWRITE COMPILER TO RUN-LENGTH ENCODE THE INPUT, BUT ONLY CONSUME CHARACTERS ONE AT A TIME
			6.	IMPROVE COMPILER CODE GENERATION TO MAKE USE OF RUN-LENGTH ENCODED INPUT WHERE POSSIBLE
			
	TESTING

		PROTOTYPE AND TEST SELF-CONTAINED MINIMAL EXAMPLES AS WE GO...

